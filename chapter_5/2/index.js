/**
 * Сумма пользовательских чисел
 * 
 * Создайте скрипт, который запрашивает ввод двух чисел (используйте prompt) и после показывает их сумму.
 * 
 * P.S. Есть «подводный камень» при работе с типами.
 */

function calc() {
  const x = +prompt('X')
  const y = +prompt('Y')
  console.log(x + y)
  //alert(x + y)
}
calc()


/**
 * Почему 6.35.toFixed(1) == 6.3?
 * 
 * Методы Math.round и toFixed, согласно документации, 
 * округляют до ближайшего целого числа: 0..4 округляется в меньшую сторону, 
 * тогда как 5..9 в большую сторону.
 * 
 * Например:
 * 
 * alert( 1.35.toFixed(1) ); // 1.4
 * 
 * Но почему в примере ниже 6.35 округляется до 6.3?
 * 
 * alert( 6.35.toFixed(1) ); // 6.3
 * 
 * Как правильно округлить 6.35?
 */


// Число 1.35 хранится в памяти в двоичной записи
console.log(1.35.toFixed(20))
// и после преобразования к десятичному чеслу выглядит 1.35000000000000008882
// поэтому при округлении получаем 1.4

// Число 6.35 хранится в памяти в двоичной записи 
// А значит оно не может быть сохранено точно, 
// console.log(6.35.toFixed(20))
//и при обратном преобразовании к десятичному числу мы получаем 6.34999999999999964473
// Именно с этим числом и работает метод toFixed. Поэтому получаем 6.3

// для верного округления 6,35 мы его умножаем на 10, т.к. 0.5 это 1/2 является конечной дробью а значит представлена точно
console.log(63.5.toFixed(20))
// Используя метод round округляем число
console.log(Math.round(6.35 * 10) / 10)

/**
 * Ввод числового значения
 * 
 * Создайте функцию readNumber, которая будет запрашивать ввод числового значения до тех пор, пока посетитель его не введёт.
 * 
 * Функция должна возвращать числовое значение.
 * 
 * Также надо разрешить пользователю остановить процесс ввода, отправив пустую строку или нажав «Отмена». В этом случае функция должна вернуть null.
 * 
 */
const readNumber = () => {

  const data = prompt('Enter number', 0)

  if (!isFinite(data)) {
    readNumber()
    return
  } else if (data === '' || data == null) {
    console.log(null)
  }
  console.log(+data)
}

readNumber()

/**
 * Бесконечный цикл по ошибке
 * 
 * Этот цикл – бесконечный. Он никогда не завершится, почему?
 * 
 * let i = 0;
 * while (i != 10) {
 *   i += 0.2;
 * }
 * 
 */

// опять таки из-за потери точности, i ни когда не будет 10 и будет постоянно расти в связи с этим, этот цикл бесконечный


/**
 * Случайное число от min до max
 * 
 * Встроенный метод Math.random() возвращает случайное число от 0 (включительно) до 1 (но не включая 1)
 * 
 * Напишите функцию random(min, max), которая генерирует случайное число с плавающей точкой от min до max (но не включая max).
 * 
 * Пример работы функции:
 * 
 * alert( random(1, 5) ); // 1.2345623452
 * alert( random(1, 5) ); // 3.7894332423
 * alert( random(1, 5) ); // 4.3435234525
 * 
 */

const random = (min, max) => Math.random(min, max) * (min - max) + max
console.log(random(1, 5))
console.log(random(1, 5))
console.log(random(1, 5))

/**
 * Случайное целое число от min до max
 * 
 * Напишите функцию randomInteger(min, max), которая генерирует случайное целое (integer) число от min до max (включительно).
 * 
 * Любое число из интервала min..max должно появляться с одинаковой вероятностью.
 * 
 * Пример работы функции:
 * 
 * alert( randomInteger(1, 5) ); // 1
 * alert( randomInteger(1, 5) ); // 3
 * alert( randomInteger(1, 5) ); // 5
 * 
 * Можно использовать решение из предыдущей задачи.
 * 
 */

const randomInteger = (min, max) => {
  const random = (Math.random(min, max) * (min - max) + max).toFixed()
  return +random
}

console.log(randomInteger(1, 5))
console.log(randomInteger(1, 5))
console.log(randomInteger(1, 5))

