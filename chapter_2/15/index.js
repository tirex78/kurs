/**
 * Следующая функция возвращает true, если параметр age больше 18.
 * В ином случае она запрашивает подтверждение через confirm и возвращает его результат:
 * 
 * function checkAge(age) {
 *   if (age > 18) {
 *     return true;
 *   } else {
 *     // ...
 *     return confirm('Родители разрешили?');
 *   }
 * }
 * Будет ли эта функция работать как-то иначе, если убрать else?
 * 
 * Разницы в работе нет
 */

/**
 * Перепишите функцию, чтобы она делала то же самое, но без if, в одну строку.
 * Сделайте два варианта функции checkAge:
 * 
 * function checkAge(age) {
 *   if (age > 18) {
 *     return true;
 *   } else {
 *     return confirm('Родители разрешили?');
 *   }
 * }
 * 
 *    1. Используя оператор ?
 *    2. Используя оператор ||
 * 
 */
function checkAge(age){
  return age > 18 ? true : confirm('Родители разрешили?')
}

function checkAge2(age){
 return age > 18 || confirm('Родители разрешили?')
}

/**
 * Напишите функцию min(a,b), которая возвращает меньшее из чисел a и b.
 * 
 * Пример вызовов:
 * 
 * min(2, 5) == 2
 * min(3, -1) == -1
 * min(1, 1) == 1
 * 
 */

function min(a,b){
return a > b ? b : a
}

/**
 * Напишите функцию pow(x,n), которая возводит x в степень n и возвращает результат.
 * 
 * pow(3, 2) = 3 * 3 = 9
 * pow(3, 3) = 3 * 3 * 3 = 27
 * pow(1, 100) = 1 * 1 * ...* 1 = 1
 * 
 * Создайте страницу, которая запрашивает x и n, а затем выводит результат pow(x,n).
 * 
 * P.S. В этой задаче функция обязана поддерживать только натуральные значения n, 
 * т.е. целые от 1 и выше.
*/

const x = 3
const n = 2

function pow(x,n){
  let result = x
  for(let i=1; i<n; i++){
    result *= x
  }
  return result
}

if (n < 1){
  console.log(`Степень ${n} не поддерживается, используйте натуральное число`)
} else {
  console.log(pow(x,n))
}



